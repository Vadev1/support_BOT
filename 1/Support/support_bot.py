import os
import logging
import platform
import secrets
import string
import sqlite3
import warnings
import shutil
from datetime import datetime
from typing import Dict, Optional, List, Union
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    CallbackContext,
    Filters
)
from telegram.error import (
    TelegramError,
    Unauthorized,
    BadRequest,
    TimedOut,
    NetworkError
)
from database import init_db, DialogStatus, get_db
from collections import deque
from functools import lru_cache
import weakref
import textwrap
from telegram.ext import ContextTypes
import psutil
import time

# Filter urllib3 warnings
warnings.filterwarnings('ignore', message='python-telegram-bot is using upstream urllib3')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('support_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_PASSWORD: str = os.getenv("ADMIN_PASSWORD", "")
ADMIN_CHAT_ID: int = int(os.getenv("ADMIN_CHAT_ID", "0"))
LEVEL2_ADMIN_ID: int = int(os.getenv("LEVEL2_ADMIN_ID", "0"))

# Type hints for global state
admin_tags: Dict[int, str] = {}
admin_levels: Dict[int, int] = {LEVEL2_ADMIN_ID: 2}
active_dialogs: Dict[int, int] = {}
one_time_passwords: Dict[str, datetime] = {}
admin_active_status: Dict[int, bool] = {}

# Constants
DIALOG_TIMEOUT = 3600  # 1 hour in seconds
MAX_MESSAGE_LENGTH = 4096
PASSWORD_LENGTH = 8
DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), 'support_bot.db'))
BACKUP_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'backups'))

# Ensure backup directory exists
os.makedirs(BACKUP_DIR, exist_ok=True)

# Message queue for handling high load
message_queue = deque(maxlen=1000)

# Beautiful message templates
WELCOME_BANNER = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   Support Bot v2.0                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!
"""

ADMIN_PANEL_BANNER = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""

ERROR_BANNER = """
‚ö†Ô∏è –û—à–∏–±–∫–∞:
{}
"""

SUCCESS_BANNER = """
‚úÖ –£—Å–ø–µ—à–Ω–æ:
{}
"""

# Add after other cache definitions
stats_cache = {}
STATS_CACHE_TTL = 5  # 5 seconds

class Cache:
    """Simple cache implementation with TTL"""
    def __init__(self, ttl: int = 3600):
        self._cache = {}
        self._ttl = ttl
        
    def get(self, key: str) -> Optional[any]:
        """Get value from cache if not expired"""
        if key in self._cache:
            value, timestamp = self._cache[key]
            if (datetime.now() - timestamp).total_seconds() < self._ttl:
                return value
            del self._cache[key]
        return None
        
    def set(self, key: str, value: any):
        """Set value in cache with current timestamp"""
        self._cache[key] = (value, datetime.now())
        
    def clear(self):
        """Clear expired cache entries"""
        now = datetime.now()
        expired = [
            k for k, (_, t) in self._cache.items()
            if (now - t).total_seconds() >= self._ttl
        ]
        for k in expired:
            del self._cache[k]

# Initialize caches
user_cache = Cache(ttl=3600)  # 1 hour TTL
admin_cache = Cache(ttl=3600)  # 1 hour TTL

class MessageFormatter:
    @staticmethod
    def format_message(text: str, max_width: int = 40) -> str:
        """Format message with proper wrapping and emoji"""
        return textwrap.fill(text, width=max_width)
    
    @staticmethod
    def format_admin_message(admin_tag: str, message: str) -> str:
        """Format admin message with beautiful styling"""
        return f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ #{admin_tag} ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ {message}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
"""
    
    @staticmethod
    def format_client_message(client_name: str, message: str) -> str:
        """Format client message with beautiful styling"""
        return f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ {client_name} ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ {message}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
"""
    
    @staticmethod
    def format_stats(stats: Dict[str, Union[int, str]]) -> str:
        """Format statistics with beautiful styling"""
        return f"""
‚ïî‚ïê‚ïê‚ïê‚ïê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {stats['messages']:>6} ‚ïë
‚ïë –î—ñ–∞–ª–æ–≥—ñ–≤:    {stats['dialogs']:>6} ‚ïë
‚ïë –ê–¥–º—ñ–Ω—ñ–≤:     {stats['admins']:>6} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""

msg_formatter = MessageFormatter()

# Message queue for handling high load
message_queue = deque(maxlen=1000)

# Cache for frequently accessed data
@lru_cache(maxsize=100)
def get_user_display_name(user) -> str:
    """Get user's display name with caching"""
    cache_key = f"user_name_{getattr(user, 'id', 0)}"
    cached_name = user_cache.get(cache_key)
    if cached_name:
        return cached_name
        
    name = _get_user_display_name(user)
    user_cache.set(cache_key, name)
    return name

def _get_user_display_name(user) -> str:
    """Internal function to get user's display name"""
    if user is None:
        return "Unknown User"
    
    if hasattr(user, 'full_name'):
        full_name = user.full_name
        username = user.username
    else:
        full_name = user.title if hasattr(user, 'title') else (user.first_name or "Unknown")
        username = user.username if hasattr(user, 'username') else None
    
    return f"{full_name} (@{username})" if username else full_name

class CustomMessageHandler:
    def __init__(self):
        self._cache = weakref.WeakValueDictionary()
        
    async def process_message(self, update: Update, context: CallbackContext):
        """Process message with caching and queueing"""
        message = update.message.text
        user = update.effective_user
        user_id = user.id
        
        # Check cache first
        cache_key = f"{user_id}:{message}"
        if cache_key in self._cache:
            return self._cache[cache_key]
            
        # Add to queue for processing
        message_queue.append((update, context))
        
        # Process message
        result = await self._handle_message(update, context)
        
        # Cache result
        self._cache[cache_key] = result
        return result
        
    async def _handle_message(self, update: Update, context: CallbackContext):
        """Internal message handling logic"""
        user = update.effective_user
        user_id = user.id
        message = update.message.text
        user_display_name = get_user_display_name(user)
        chat_id = update.effective_chat.id  # Use effective_chat.id instead of user.id

        if user_id in admin_levels:
            # Handle admin messages
            if user_id in active_dialogs:
                client_id = active_dialogs[user_id]
                tag = admin_tags.get(user_id, "Admin")
                response = f"üí¨ –û—Ç–≤–µ—Ç #{tag} üòä\n{message}"
                msg_sent = safe_send_message(context.bot, client_id, response)
                if msg_sent:
                    save_message_to_history(user_id, client_id, message)
                    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} –æ—Ç–≤–µ—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                else:
                    safe_send_message(
                        context.bot,
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É!"
                    )
        else:
            # Check if message starts with hashtag
            if message.startswith('#'):
                requested_tag = message[1:].lower()
                selected_admin = None
                
                # Find admin by tag
                for admin_id, tag in admin_tags.items():
                    if tag.lower() == requested_tag:
                        if not admin_active_status.get(admin_id, True):
                            safe_send_message(
                                context.bot,
                                chat_id,
                                f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä #{tag} —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                            )
                            return
                        selected_admin = admin_id
                        break
                
                if selected_admin:
                    if selected_admin in active_dialogs:
                        safe_send_message(
                            context.bot,
                            chat_id,
                            f"‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä #{requested_tag} —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º.\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                            "1. –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è\n"
                            "2. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /admins\n"
                            "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç"
                        )
                    else:
                        active_dialogs[selected_admin] = chat_id
                        save_state()
                        safe_send_message(
                            context.bot,
                            chat_id,
                            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ #{requested_tag}. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–∏–∞–ª–æ–≥!"
                        )
                        
                        admin_msg = f"üëã –ö–ª–∏–µ–Ω—Ç {user_display_name} –≤—ã–±—Ä–∞–ª –≤–∞—Å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
                        safe_send_message(context.bot, selected_admin, admin_msg)
                        logger.info(f"–ö–ª–∏–µ–Ω—Ç {user_display_name} –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω–∞ #{requested_tag}")
                    return
                else:
                    safe_send_message(
                        context.bot,
                        chat_id,
                        "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admins —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                    )
                    return
            
            # Handle regular messages
            admin_id = None
            for admin, client in active_dialogs.items():
                if client == chat_id:
                    admin_id = admin
                    break

            if admin_id:
                safe_send_message(
                    context.bot,
                    admin_id,
                    f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}:\n\n{message}"
                )
                save_message_to_history(chat_id, admin_id, message)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            else:
                keyboard = [[InlineKeyboardButton("üì© –í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"take_client_{chat_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                safe_send_message(
                    context.bot,
                    ADMIN_CHAT_ID,
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}:\n\n{message}",
                    reply_markup=reply_markup
                )
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}")
                
                safe_send_message(
                    context.bot,
                    chat_id,
                    "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\nüí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /admins"
                )

message_handler = CustomMessageHandler()

def handle_message(update: Update, context: CallbackContext):
    """Handle incoming messages"""
    try:
        user = update.effective_user
        user_id = user.id
        message = update.message.text
        user_display_name = get_user_display_name(user)
        chat_id = update.effective_chat.id  # Use effective_chat.id instead of user.id

        if user_id in admin_levels:
            # Handle admin messages
            if user_id in active_dialogs:
                client_id = active_dialogs[user_id]
                tag = admin_tags.get(user_id, "Admin")
                response = f"üí¨ –û—Ç–≤–µ—Ç #{tag} üòä\n{message}"
                msg_sent = safe_send_message(context.bot, client_id, response)
                if msg_sent:
                    save_message_to_history(user_id, client_id, message)
                    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} –æ—Ç–≤–µ—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                else:
                    safe_send_message(
                        context.bot,
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É!"
                    )
        else:
            # Check if message starts with hashtag
            if message.startswith('#'):
                requested_tag = message[1:].lower()
                selected_admin = None
                
                # Find admin by tag
                for admin_id, tag in admin_tags.items():
                    if tag.lower() == requested_tag:
                        if not admin_active_status.get(admin_id, True):
                            safe_send_message(
                                context.bot,
                                chat_id,
                                f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä #{tag} —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                            )
                            return
                        selected_admin = admin_id
                        break
                
                if selected_admin:
                    if selected_admin in active_dialogs:
                        safe_send_message(
                            context.bot,
                            chat_id,
                            f"‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä #{requested_tag} —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º.\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                            "1. –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è\n"
                            "2. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /admins\n"
                            "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç"
                        )
                    else:
                        active_dialogs[selected_admin] = chat_id
                        save_state()
                        safe_send_message(
                            context.bot,
                            chat_id,
                            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ #{requested_tag}. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–∏–∞–ª–æ–≥!"
                        )
                        
                        admin_msg = f"üëã –ö–ª–∏–µ–Ω—Ç {user_display_name} –≤—ã–±—Ä–∞–ª –≤–∞—Å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
                        safe_send_message(context.bot, selected_admin, admin_msg)
                        logger.info(f"–ö–ª–∏–µ–Ω—Ç {user_display_name} –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω–∞ #{requested_tag}")
                    return
                else:
                    safe_send_message(
                        context.bot,
                        chat_id,
                        "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admins —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                    )
                    return
            
            # Handle regular messages
            admin_id = None
            for admin, client in active_dialogs.items():
                if client == chat_id:
                    admin_id = admin
                    break

            if admin_id:
                safe_send_message(
                    context.bot,
                    admin_id,
                    f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}:\n\n{message}"
                )
                save_message_to_history(chat_id, admin_id, message)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            else:
                keyboard = [[InlineKeyboardButton("üì© –í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"take_client_{chat_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                safe_send_message(
                    context.bot,
                    ADMIN_CHAT_ID,
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}:\n\n{message}",
                    reply_markup=reply_markup
                )
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_display_name}")
                
                safe_send_message(
                    context.bot,
                    chat_id,
                    "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\nüí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /admins"
                )
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        if update and update.effective_chat:
            safe_send_message(
                context.bot,
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

class DatabaseConnection:
    def __init__(self, db_path: str = DB_PATH):
        self.db_path = db_path
        self._connection = None
        
        # Create backup directory if it doesn't exist
        if not os.path.exists(BACKUP_DIR):
            os.makedirs(BACKUP_DIR)
            
        # Create backup on initialization
        self._create_backup()

    def _create_backup(self):
        """Create a backup of the database"""
        if os.path.exists(self.db_path):
            backup_name = f'support_bot_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            backup_path = os.path.join(BACKUP_DIR, backup_name)
            try:
                shutil.copy2(self.db_path, backup_path)
                # Keep only last 5 backups
                backups = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')])
                for old_backup in backups[:-5]:
                    os.remove(os.path.join(BACKUP_DIR, old_backup))
                logger.info(f"Created database backup: {backup_name}")
            except Exception as e:
                logger.error(f"Failed to create database backup: {e}")

    def get_connection(self) -> sqlite3.Connection:
        """Get database connection with automatic reconnection"""
        try:
            if self._connection is None:
                self._connection = sqlite3.connect(self.db_path)
                self._connection.row_factory = sqlite3.Row
                # Enable foreign keys
                self._connection.execute('PRAGMA foreign_keys = ON')
                # Enable WAL mode for better concurrency
                self._connection.execute('PRAGMA journal_mode = WAL')
            # Test the connection
            self._connection.execute('SELECT 1')
            return self._connection
        except (sqlite3.Error, Exception) as e:
            logger.error(f"Database connection error: {e}")
            # Try to close and reconnect
            if self._connection:
                try:
                    self._connection.close()
                except:
                    pass
            self._connection = None
            # Try to restore from backup if database is corrupted
            if isinstance(e, sqlite3.DatabaseError):
                self._restore_from_backup()
            raise

    def _restore_from_backup(self):
        """Attempt to restore database from latest backup"""
        try:
            backups = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')])
            if backups:
                latest_backup = os.path.join(BACKUP_DIR, backups[-1])
                shutil.copy2(latest_backup, self.db_path)
                logger.info(f"Restored database from backup: {backups[-1]}")
        except Exception as e:
            logger.error(f"Failed to restore database from backup: {e}")

    def close(self):
        """Safely close the database connection"""
        if self._connection:
            try:
                self._connection.commit()
                self._connection.close()
            except Exception as e:
                logger.error(f"Error closing database connection: {e}")
            finally:
                self._connection = None

db = DatabaseConnection()

def save_message_to_history(sender_id: int, receiver_id: int, message: str):
    """Save message to dialog history"""
    conn = sqlite3.connect('support_bot.db')
    c = conn.cursor()
    try:
        c.execute(
            'INSERT INTO dialog_history (sender_id, receiver_id, message) VALUES (?, ?, ?)',
            (sender_id, receiver_id, message)
        )
        conn.commit()
    finally:
        c.close()
        conn.close()

def init_database():
    """Initialize database with all necessary tables"""
    conn = None
    try:
        # Create backup of existing database if it exists
        if os.path.exists(DB_PATH):
            db._create_backup()
            
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # Enable foreign keys and WAL mode
        c.execute('PRAGMA foreign_keys = ON')
        c.execute('PRAGMA journal_mode = WAL')
        
        # First, rename existing admin_status table if it exists
        c.execute('''SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='admin_status' ''')
        if c.fetchone():
            c.execute('ALTER TABLE admin_status RENAME TO admin_status_old')
            
        # Create tables with better constraints
        c.execute('''CREATE TABLE IF NOT EXISTS admin_tags
                     (admin_id INTEGER PRIMARY KEY,
                      tag TEXT UNIQUE NOT NULL)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS admin_levels
                     (admin_id INTEGER PRIMARY KEY,
                      level INTEGER NOT NULL CHECK (level IN (1, 2)),
                      FOREIGN KEY (admin_id) REFERENCES admin_tags(admin_id))''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS active_dialogs
                     (admin_id INTEGER PRIMARY KEY,
                      client_id INTEGER NOT NULL,
                      start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (admin_id) REFERENCES admin_tags(admin_id))''')
        
        # Create new admin_status table
        c.execute('''CREATE TABLE IF NOT EXISTS admin_status
                     (admin_id INTEGER PRIMARY KEY,
                      is_active BOOLEAN NOT NULL DEFAULT 1,
                      last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (admin_id) REFERENCES admin_tags(admin_id))''')
        
        # Migrate data from old table if it exists
        c.execute('''SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='admin_status_old' ''')
        if c.fetchone():
            c.execute('''INSERT OR REPLACE INTO admin_status (admin_id, is_active)
                        SELECT admin_id, is_active FROM admin_status_old''')
            c.execute('DROP TABLE admin_status_old')
        
        c.execute('''CREATE TABLE IF NOT EXISTS dialog_history
                     (message_id INTEGER PRIMARY KEY AUTOINCREMENT,
                      sender_id INTEGER NOT NULL,
                      receiver_id INTEGER NOT NULL,
                      message TEXT NOT NULL,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        
        # Add indexes for better performance
        c.execute('CREATE INDEX IF NOT EXISTS idx_dialog_history_sender ON dialog_history(sender_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_dialog_history_receiver ON dialog_history(receiver_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_dialog_history_timestamp ON dialog_history(timestamp)')
        
        # Initialize level 2 admin if not exists
        if LEVEL2_ADMIN_ID:
            c.execute('INSERT OR IGNORE INTO admin_tags VALUES (?, ?)', 
                     (LEVEL2_ADMIN_ID, 'admin'))
            c.execute('INSERT OR IGNORE INTO admin_levels VALUES (?, ?)', 
                     (LEVEL2_ADMIN_ID, 2))
            # Fixed insert statement for admin_status
            c.execute('INSERT OR IGNORE INTO admin_status (admin_id, is_active) VALUES (?, ?)', 
                     (LEVEL2_ADMIN_ID, True))
        
        # Load saved state with error handling
        admin_tags.clear()
        admin_levels.clear()
        active_dialogs.clear()
        admin_active_status.clear()
        
        try:
            # Load admin tags
            c.execute('SELECT * FROM admin_tags')
            for row in c.fetchall():
                admin_tags[row[0]] = row[1]
            
            # Load admin levels
            c.execute('SELECT * FROM admin_levels')
            for row in c.fetchall():
                admin_levels[row[0]] = row[1]
            
            # Load active dialogs
            c.execute('SELECT * FROM active_dialogs')
            for row in c.fetchall():
                active_dialogs[row[0]] = row[1]
            
            # Load admin statuses
            c.execute('SELECT admin_id, is_active FROM admin_status')
            for row in c.fetchall():
                admin_active_status[row[0]] = bool(row[1])
            
            logger.info("Successfully loaded state from database")
            
        except Exception as e:
            logger.error(f"Error loading state from database: {e}")
            # Try to restore from backup
            db._restore_from_backup()
        
        conn.commit()
        
    except Exception as e:
        logger.error(f"Database initialization error: {e}")
        if conn:
            conn.rollback()
        # Try to restore from backup
        db._restore_from_backup()
        raise
    finally:
        if conn:
            conn.close()

def save_state():
    """Save current state to database"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    try:
        # Begin transaction
        c.execute('BEGIN TRANSACTION')
        
        # Save admin tags
        c.execute('DELETE FROM admin_tags')
        for admin_id, tag in admin_tags.items():
            c.execute('INSERT INTO admin_tags VALUES (?, ?)', (admin_id, tag))
        
        # Save admin levels
        c.execute('DELETE FROM admin_levels')
        for admin_id, level in admin_levels.items():
            c.execute('INSERT INTO admin_levels VALUES (?, ?)', (admin_id, level))
        
        # Save active dialogs
        c.execute('DELETE FROM active_dialogs')
        for admin_id, client_id in active_dialogs.items():
            c.execute('''INSERT INTO active_dialogs 
                        (admin_id, client_id, start_time) 
                        VALUES (?, ?, CURRENT_TIMESTAMP)''', 
                     (admin_id, client_id))
        
        # Save admin statuses
        c.execute('DELETE FROM admin_status')
        for admin_id, is_active in admin_active_status.items():
            c.execute('''INSERT INTO admin_status 
                        (admin_id, is_active, last_updated) 
                        VALUES (?, ?, CURRENT_TIMESTAMP)''', 
                     (admin_id, is_active))
        
        # Commit transaction
        conn.commit()
        logger.info("Successfully saved state to database")
        
    except Exception as e:
        # If any error occurs, rollback the transaction
        conn.rollback()
        logger.error(f"Error saving state to database: {e}")
        
        # Try to create a backup before potential recovery
        db._create_backup()
        
        try:
            # Attempt recovery by saving without timestamps
            c.execute('BEGIN TRANSACTION')
            
            # Re-save admin tags
            c.execute('DELETE FROM admin_tags')
            for admin_id, tag in admin_tags.items():
                c.execute('INSERT INTO admin_tags VALUES (?, ?)', (admin_id, tag))
            
            # Re-save admin levels
            c.execute('DELETE FROM admin_levels')
            for admin_id, level in admin_levels.items():
                c.execute('INSERT INTO admin_levels VALUES (?, ?)', (admin_id, level))
            
            # Re-save active dialogs (simplified)
            c.execute('DELETE FROM active_dialogs')
            for admin_id, client_id in active_dialogs.items():
                c.execute('INSERT INTO active_dialogs (admin_id, client_id) VALUES (?, ?)', 
                         (admin_id, client_id))
            
            # Re-save admin statuses (simplified)
            c.execute('DELETE FROM admin_status')
            for admin_id, is_active in admin_active_status.items():
                c.execute('INSERT INTO admin_status (admin_id, is_active) VALUES (?, ?)', 
                         (admin_id, is_active))
            
            conn.commit()
            logger.info("Successfully recovered and saved state to database")
            
        except Exception as recovery_error:
            conn.rollback()
            logger.error(f"Failed to recover state: {recovery_error}")
            # If recovery fails, try to restore from backup
            db._restore_from_backup()
        
    finally:
        conn.close()

def set_tag_command(update: Update, context: CallbackContext):
    """Handle /set_tag command"""
    args = context.args
    if len(args) != 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_tag <–ø–∞—Ä–æ–ª—å> <—Ç–µ–≥>"
        )
        return

    password, tag = args
    user = update.effective_user
    user_id = user.id
    user_display_name = get_user_display_name(user)

    # Check one-time password
    if password in one_time_passwords:
        # Check if password is not expired (24 hours)
        if (datetime.now() - one_time_passwords[password]).total_seconds() <= 86400:
            admin_tags[user_id] = tag
            admin_levels[user_id] = 1
            admin_active_status[user_id] = True  # Initialize admin as active
            del one_time_passwords[password]  # Remove used password
            
            # Save to database with proper column specification
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            try:
                c.execute('INSERT OR REPLACE INTO admin_tags VALUES (?, ?)', 
                         (user_id, tag))
                c.execute('INSERT OR REPLACE INTO admin_levels VALUES (?, ?)', 
                         (user_id, 1))
                c.execute('''INSERT OR REPLACE INTO admin_status 
                           (admin_id, is_active, last_updated) 
                           VALUES (?, ?, CURRENT_TIMESTAMP)''', 
                         (user_id, True))
                conn.commit()
                
                logger.info(f"New admin initialized: {user_display_name} (ID: {user_id}), tag={tag}, active=True")
                
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚úÖ –¢–µ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tag}\n–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 1-–≥–æ —É—Ä–æ–≤–Ω—è."
                )
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥ {tag} –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_display_name} (ID: {user_id})")
            except Exception as e:
                conn.rollback()
                logger.error(f"Database error in set_tag_command: {e}")
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            finally:
                conn.close()
        else:
            del one_time_passwords[password]  # Remove expired password
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü–∞—Ä–æ–ª—å –∏—Å—Ç–µ–∫! –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è."
            )
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–≥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display_name} (ID: {user_id})")

def generate_one_time_password(length: int = PASSWORD_LENGTH) -> str:
    """Generate a random one-time password"""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def safe_send_message(bot, chat_id, text, reply_markup=None):
    """Safely send a message with error handling"""
    try:
        return bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except TelegramError as e:
        error_type = type(e).__name__
        if error_type == 'ChatMigrated':
            # Get new chat id from the error message
            new_chat_id = e.migrate_to_chat_id if hasattr(e, 'migrate_to_chat_id') else None
            if not new_chat_id and isinstance(e.message, str):
                # Try to extract chat id from error message
                import re
                match = re.search(r'New chat id: (-?\d+)', e.message)
                if match:
                    new_chat_id = int(match.group(1))
            
            if new_chat_id:
                logger.info(f"–ß–∞—Ç {chat_id} –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {new_chat_id}")
                
                # Update active_dialogs if needed
                for admin_id, old_chat_id in list(active_dialogs.items()):
                    if old_chat_id == chat_id:
                        active_dialogs[admin_id] = new_chat_id
                        save_state()
                        break
                
                # Update database
                conn = sqlite3.connect('support_bot.db')
                c = conn.cursor()
                try:
                    # Update sender_id
                    c.execute(
                        'UPDATE dialog_history SET sender_id = ? WHERE sender_id = ?',
                        (new_chat_id, chat_id)
                    )
                    # Update receiver_id
                    c.execute(
                        'UPDATE dialog_history SET receiver_id = ? WHERE receiver_id = ?',
                        (new_chat_id, chat_id)
                    )
                    conn.commit()
                except Exception as db_error:
                    logger.error(f"Error updating chat ID in database: {db_error}")
                    conn.rollback()
                finally:
                    conn.close()
                
                # Try sending to new chat_id
                try:
                    return bot.send_message(
                        chat_id=new_chat_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                except Exception as new_error:
                    logger.error(f"Error sending to migrated chat: {new_error}")
                    return None
            else:
                logger.error(f"Could not extract new chat ID from error: {e}")
                return None
        elif isinstance(e, Unauthorized):
            logger.error(f"–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
            # Remove from active dialogs if blocked
            for admin_id, client_id in list(active_dialogs.items()):
                if client_id == chat_id:
                    del active_dialogs[admin_id]
                    save_state()
                    break
        elif isinstance(e, BadRequest):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        elif isinstance(e, TimedOut):
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        elif isinstance(e, NetworkError):
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ {error_type} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        return None

def start_command(update: Update, context: CallbackContext):
    """Handle /start command with beautiful formatting"""
    try:
        user = update.effective_user
        user_display_name = get_user_display_name(user)
        
        welcome_message = f"{WELCOME_BANNER}\n\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å, {user_display_name}! üòä\n\n"
        welcome_message += "üîπ –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        welcome_message += "üîπ –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admins\n"
        welcome_message += "üîπ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        
        context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_message)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def help_command(update: Update, context: CallbackContext):
    """Show help message with available commands"""
    user = update.effective_user
    user_id = user.id
    
    # Basic commands for all users
    help_text = f"""
‚ïî‚ïê‚ïê‚ïê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚ïê‚ïê‚ïê‚ïó
‚ïë üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚ïë üîπ /help - –≠—Ç–æ –º–µ–Ω—é
‚ïë üîπ /admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
‚ïë üîπ /feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
"""
    
    # Admin commands
    if user_id in admin_levels:
        admin_level = admin_levels[user_id]
        help_text += f"""
‚ïë üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:
‚ïë üî∏ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
‚ïë üî∏ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
        
        if admin_level == 2:
            help_text += f"""
‚ïë ‚≠ê –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ 2 —É—Ä–æ–≤–Ω—è:
‚ïë üî∏ /monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚ïë üî∏ /promote - –ü–æ–≤—ã—Å–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚ïë üî∏ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞
"""
    
    help_text += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)

def admin_command(update: Update, context: CallbackContext):
    """Handle /admin command"""
    user = update.effective_user
    user_id = user.id
    user_display_name = get_user_display_name(user)
    if user_id not in admin_levels:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    update_admin_panel(update, context)
    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} (ID: {user_id}) –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

def list_admins_command(update: Update, context: CallbackContext):
    """Handle /admins command - show list of available admins"""
    all_admins = []
    available_admins_exist = False

    for admin_id in admin_levels.keys():
        try:
            tag = admin_tags.get(admin_id, "Admin")
            is_active = admin_active_status.get(admin_id, True)
            
            if admin_id in active_dialogs:
                status = "üî¥"
            elif not is_active:
                status = "‚ö´"
            else:
                status = "üü¢"
                available_admins_exist = True
                
            all_admins.append(f"{status} #{tag}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            continue

    if all_admins:
        message = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n" + "\n".join(all_admins)
        if available_admins_exist:
            message += "\n\nüí° –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ö–µ—à—Ç–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #support)"
        else:
            message += "\n\nüòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
    else:
        message = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"

    context.bot.send_message(chat_id=update.effective_chat.id, text=message)

def get_admin_transfer_keyboard(admin_id):
    """Create keyboard for admin transfer"""
    keyboard = []
    row = []
    count = 0
    
    for target_admin_id, tag in admin_tags.items():
        if target_admin_id != admin_id:  # Don't show current admin
            try:
                admin = bot.get_chat(target_admin_id)
                admin_name = get_user_display_name(admin)
                status = "üî¥" if target_admin_id in active_dialogs else "üü¢"
                button = InlineKeyboardButton(
                    f"{status} #{tag} - {admin_name}",
                    callback_data=f"transfer_{target_admin_id}"
                )
                row.append(button)
                count += 1
                
                if count % 2 == 0:  # Two buttons per row
                    keyboard.append(row)
                    row = []
            except:
                continue
    
    if row:  # Add remaining buttons
        keyboard.append(row)
    
    # Add cancel button
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transfer")])
    
    return InlineKeyboardMarkup(keyboard)

def button_callback(update: Update, context: CallbackContext):
    """Handle button callbacks"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    user = query.from_user
    user_id = user.id
    user_display_name = get_user_display_name(user)

    if data == "generate_password" and admin_levels.get(user_id) == 2:
        password = generate_one_time_password()
        one_time_passwords[password] = datetime.now()
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n`{password}`\n\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/set_tag {password} –∂–µ–ª–∞–µ–º—ã–π_—Ç–µ–≥`"
        )
        logger.info(f"–ê–¥–º–∏–Ω {user_display_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
        return

    elif data == "promote_info" and admin_levels.get(user_id) == 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚≠ê –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ 2-–≥–æ —Ä–∞–Ω–≥–∞:\n\n"
            "1. –£–∑–Ω–∞–π—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/promote <user_id>`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/promote 123456789`\n\n"
            "‚ùó –ü–æ–≤—ã—à–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ 1-–≥–æ —Ä–∞–Ω–≥–∞"
        )
        return

    elif data.startswith("take_client_"):
        client_id = int(data.split("_")[2])
        try:
            client = context.bot.get_chat(client_id)
            client_display_name = get_user_display_name(client)
        except:
            client_display_name = f"–ö–ª–∏–µ–Ω—Ç {client_id}"

        if client_id in active_dialogs.values():
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text="‚ùå –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
            return

        active_dialogs[user_id] = client_id
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text=f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_display_name}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."
        )
        
        context.bot.send_message(
            chat_id=client_id,
            text="üëã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_display_name} –≤–∑—è–ª –∫–ª–∏–µ–Ω—Ç–∞ {client_display_name}")

    elif data == "close_dialog":
        if user_id in active_dialogs:
            client_id = active_dialogs[user_id]
            try:
                client = context.bot.get_chat(client_id)
                client_display_name = get_user_display_name(client)
            except:
                client_display_name = f"–ö–ª–∏–µ–Ω—Ç {client_id}"

            keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="confirm_close")]]
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å {client_display_name}?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤!"
            )

    elif data == "confirm_close":
        if user_id in active_dialogs:
            client_id = active_dialogs[user_id]
            try:
                client = context.bot.get_chat(client_id)
                client_display_name = get_user_display_name(client)
            except:
                client_display_name = f"–ö–ª–∏–µ–Ω—Ç {client_id}"

            del active_dialogs[user_id]
            context.bot.send_message(
                chat_id=client_id,
                text="üôè –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üòä"
            )
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text=f"‚úÖ –î–∏–∞–ª–æ–≥ —Å {client_display_name} –∑–∞–≤–µ—Ä—à–µ–Ω!"
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_display_name} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å {client_display_name}")

    elif data == "monitor" and admin_levels.get(user_id) == 2:
        monitor_command(update, context)
        return

    elif data == "stats":
        if user_id in admin_levels:
            try:
                stats_text = get_statistics(context)
                current_text = query.message.text
                if current_text != f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n{stats_text}":
                    context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=query.message.message_id,
                        text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n{stats_text}",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats")
                        ]])
                    )
                else:
                    # –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            except Exception as e:
                logger.error(f"Error updating stats: {e}")
                query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        else:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!"
            )
        return

    elif data == "transfer_client":
        if user_id not in active_dialogs:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!"
            )
            return
            
        keyboard = get_admin_transfer_keyboard(user_id)
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text="üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        return

    elif data.startswith("transfer_"):
        target_admin_id = int(data.split("_")[1])
        transfer_client(update, context, target_admin_id)
        return

    elif data == "cancel_transfer":
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text="‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
        return

    elif data == "toggle_status":
        toggle_activity_status(update, context)
        update_admin_panel(update, context)
        return

def transfer_client(update: Update, context: CallbackContext, target_admin_id: int):
    """Transfer client to another admin"""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    user_display_name = get_user_display_name(user)
    
    if user_id not in active_dialogs:
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text="‚ùå –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!"
        )
        return
        
    client_id = active_dialogs[user_id]
    
    # Check if target admin exists and is not busy
    if target_admin_id in active_dialogs:
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text="‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º!\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
        )
        keyboard = get_admin_transfer_keyboard(user_id)
        context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            reply_markup=keyboard
        )
        return
        
    try:
        # Get admin names
        target_admin = context.bot.get_chat(target_admin_id)
        target_admin_name = get_user_display_name(target_admin)
        target_admin_tag = admin_tags.get(target_admin_id, "Admin")
        
        client = context.bot.get_chat(client_id)
        client_name = get_user_display_name(client)
        
        # Transfer dialog
        del active_dialogs[user_id]
        active_dialogs[target_admin_id] = client_id
        
        # Save state after transfer
        save_state()
        
        # Notify all parties
        context.bot.send_message(
            chat_id=client_id,
            text=f"üëã –í–∞—à –¥–∏–∞–ª–æ–≥ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É #{target_admin_tag}"
        )
        
        context.bot.send_message(
            chat_id=target_admin_id,
            text=f"üëã –í–∞–º –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç {client_name} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_display_name}"
        )
        
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É #{target_admin_tag}"
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_display_name} –ø–µ—Ä–µ–¥–∞–ª –∫–ª–∏–µ–Ω—Ç–∞ {client_name} –∞–¥–º–∏–Ω—É #{target_admin_tag}")
        
    except Exception as e:
        logger.error(f"Error transferring client: {e}")
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–ª–∏–µ–Ω—Ç–∞!"
        )
        return

def broadcast_command(update: Update, context: CallbackContext):
    """Send broadcast message to all users (admin level 2 only)"""
    user = update.effective_user
    user_id = user.id
    
    if admin_levels.get(user_id) != 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=ERROR_BANNER.format("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º 2 —É—Ä–æ–≤–Ω—è!")
        )
        return
    
    if not context.args:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
        )
        return
    
    message = ' '.join(context.args)
    
    # Get all unique users from dialog history
    conn = sqlite3.connect('support_bot.db')
    c = conn.cursor()
    try:
        c.execute('''
            SELECT DISTINCT sender_id FROM dialog_history 
            WHERE sender_id NOT IN (SELECT admin_id FROM admin_levels)
        ''')
        users = c.fetchall()
    finally:
        c.close()
        conn.close()
    
    success_count = 0
    fail_count = 0
    
    broadcast_msg = f"""
üì¢ –û–≥–æ–ª–æ—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:

{message}
"""
    
    for user_row in users:
        try:
            context.bot.send_message(chat_id=user_row[0], text=broadcast_msg)
            success_count += 1
            time.sleep(0.1)  # Prevent flooding
        except Exception as e:
            logger.error(f"Error sending broadcast to {user_row[0]}: {e}")
            fail_count += 1
    
    result_msg = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:
‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {fail_count}
"""
    context.bot.send_message(chat_id=update.effective_chat.id, text=result_msg)

def promote_admin_command(update: Update, context: CallbackContext):
    """Handle /promote command to upgrade admin level"""
    user = update.effective_user
    user_id = user.id
    user_display_name = get_user_display_name(user)
    
    # Check if command user is level 2 admin
    if admin_levels.get(user_id) != 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 2-–≥–æ —Ä–∞–Ω–≥–∞ –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!"
        )
        return

    # Check command arguments
    args = context.args
    if len(args) != 1:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promote <user_id>"
        )
        return

    try:
        target_id = int(args[0])
        target_chat = context.bot.get_chat(target_id)
        target_name = get_user_display_name(target_chat)
    except ValueError:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        )
        return
    except Exception as e:
        logger.error(f"Error getting target user info: {e}")
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!"
        )
        return

    # Check if target is already an admin
    if target_id not in admin_levels:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )
        return

    # Check if target is already level 2
    if admin_levels[target_id] == 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –≠—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∏–º–µ–µ—Ç 2-–π —Ä–∞–Ω–≥!"
        )
        return

    # Promote admin to level 2
    admin_levels[target_id] = 2
    admin_active_status[target_id] = True  # Ensure promoted admin is active
    save_state()  # Save changes
    
    # Notify both admins
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_name} (ID: {target_id}) –ø–æ–≤—ã—à–µ–Ω –¥–æ 2-–≥–æ —Ä–∞–Ω–≥–∞!"
    )
    
    try:
        context.bot.send_message(
            chat_id=target_id,
            text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —Ä–∞–Ω–≥–∞!\n"
                 "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                 "- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
                 "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                 "- –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {target_name} (ID: {target_id}): {e}")

    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} (ID: {user_id}) –ø–æ–≤—ã—Å–∏–ª –∞–¥–º–∏–Ω–∞ {target_name} (ID: {target_id}) –¥–æ 2-–≥–æ —Ä–∞–Ω–≥–∞")

def monitor_command(update: Update, context: CallbackContext):
    """Handle /monitor command for level 2 admins"""
    user_id = update.effective_user.id
    if admin_levels.get(user_id) != 2:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º 2-–≥–æ —É—Ä–æ–≤–Ω—è!"
        )
        return

    conn = sqlite3.connect('support_bot.db')
    c = conn.cursor()
    
    # Get active dialogs with admin names
    active_dialog_info = []
    for admin_id, client_id in active_dialogs.items():
        admin_tag = admin_tags.get(admin_id, "Unknown")
        try:
            admin = context.bot.get_chat(admin_id)
            admin_name = get_user_display_name(admin)
            client = context.bot.get_chat(client_id)
            client_name = get_user_display_name(client)
            
            # Get last 3 messages from this dialog
            c.execute('''
                SELECT sender_id, message, timestamp 
                FROM dialog_history 
                WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?)
                ORDER BY timestamp DESC LIMIT 3
            ''', (admin_id, client_id, client_id, admin_id))
            
            messages = c.fetchall()
            dialog_preview = "\n".join([
                f"{'üë§' if msg[0] == client_id else 'üë®‚Äçüíº'} {msg[1][:50]}..." 
                for msg in messages
            ])
            
            active_dialog_info.append(
                f"üë®‚Äçüíº –ê–¥–º–∏–Ω: #{admin_tag} - {admin_name}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{dialog_preview}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
            )
        except:
            continue
    
    if active_dialog_info:
        message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:\n\n" + "\n\n".join(active_dialog_info)
    else:
        message = "üìä –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"
    
    conn.close()
    context.bot.send_message(chat_id=update.effective_chat.id, text=message)

def get_statistics(context: CallbackContext) -> str:
    """Get detailed statistics about bot usage with caching"""
    current_time = time.time()  # Fix: Use time.time() instead of time()
    
    # Check cache
    if 'stats' in stats_cache:
        cached_stats, cache_time = stats_cache['stats']
        if current_time - cache_time < STATS_CACHE_TTL:
            return cached_stats
    
    conn = sqlite3.connect(DB_PATH)  # Use DB_PATH constant
    c = conn.cursor()
    
    try:
        stats = []
        
        # Get total number of messages
        c.execute('SELECT COUNT(*) FROM dialog_history')
        total_messages = c.fetchone()[0]
        stats.append(f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        
        # Get number of active dialogs
        active_dialog_count = len(active_dialogs)
        stats.append(f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {active_dialog_count}")
        
        # Get statistics for each admin
        stats.append("\nüë®‚Äçüíº –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
        for admin_id, tag in admin_tags.items():
            try:
                # Get admin info
                admin = context.bot.get_chat(admin_id)
                admin_name = get_user_display_name(admin)
                
                # Get total messages sent by this admin
                c.execute('SELECT COUNT(*) FROM dialog_history WHERE sender_id = ?', (admin_id,))
                messages_sent = c.fetchone()[0]
                
                # Get total dialogs participated
                c.execute('SELECT COUNT(DISTINCT receiver_id) FROM dialog_history WHERE sender_id = ?', (admin_id,))
                total_dialogs = c.fetchone()[0]
                
                # Get average response time
                c.execute('''
                    SELECT AVG(response_time) FROM (
                        SELECT 
                            h1.timestamp as msg_time,
                            MIN(h2.timestamp) as response_time,
                            (JULIANDAY(MIN(h2.timestamp)) - JULIANDAY(h1.timestamp)) * 24 * 60 as response_time_minutes
                        FROM dialog_history h1
                        LEFT JOIN dialog_history h2 ON h2.sender_id = ? 
                            AND h2.receiver_id = h1.sender_id
                            AND h2.timestamp > h1.timestamp
                        WHERE h1.receiver_id = ?
                        GROUP BY h1.message_id
                    ) WHERE response_time IS NOT NULL
                ''', (admin_id, admin_id))
                avg_response_time = c.fetchone()[0]
                
                # Get current status
                status = "üî¥ –∑–∞–Ω—è—Ç" if admin_id in active_dialogs else "üü¢ —Å–≤–æ–±–æ–¥–µ–Ω"
                
                admin_stats = [
                    f"#{tag} - {admin_name}",
                    f"‚îú –°—Ç–∞—Ç—É—Å: {status}",
                    f"‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_sent}",
                    f"‚îú –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_dialogs}",
                    f"‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {int(avg_response_time) if avg_response_time else 0} –º–∏–Ω."
                ]
                stats.extend(admin_stats)
            except Exception as e:
                logger.error(f"Error getting stats for admin {admin_id}: {e}")
                continue
        
        # Get today's statistics
        today = datetime.now().strftime('%Y-%m-%d')
        c.execute('''
            SELECT COUNT(*) FROM dialog_history 
            WHERE date(timestamp) = date('now')
        ''')
        today_messages = c.fetchone()[0]
        stats.append(f"\nüìÖ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_messages}")
        
        # Get busiest hour
        c.execute('''
            SELECT 
                strftime('%H', timestamp) as hour,
                COUNT(*) as message_count
            FROM dialog_history
            GROUP BY hour
            ORDER BY message_count DESC
            LIMIT 1
        ''')
        busiest_hour = c.fetchone()
        if busiest_hour:
            stats.append(f"‚è∞ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {busiest_hour[0]}:00 ({busiest_hour[1]} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        result = "\n".join(stats)
        
        # Update cache
        stats_cache['stats'] = (result, current_time)
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    finally:
        conn.close()

def stats_command(update: Update, context: CallbackContext):
    """Handle /stats command"""
    user = update.effective_user
    user_id = user.id
    user_display_name = get_user_display_name(user)
    
    if user_id not in admin_levels:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!"
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display_name} (ID: {user_id})")
        return

    stats_text = get_statistics(context)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n{stats_text}"
    )
    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

def toggle_activity_status(update: Update, context: CallbackContext):
    """Toggle admin's activity status"""
    user = update.effective_user
    user_id = user.id
    user_display_name = get_user_display_name(user)
    
    if user_id not in admin_levels:
        return
        
    # Toggle status
    current_status = admin_active_status.get(user_id, True)
    new_status = not current_status
    admin_active_status[user_id] = new_status
    
    logger.info(f"–ê–¥–º–∏–Ω {user_display_name} (ID: {user_id}) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å:")
    logger.info(f"- –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω—ã–π' if current_status else '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}")
    logger.info(f"- –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω—ã–π' if new_status else '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}")
    logger.info(f"- –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∞–¥–º–∏–Ω–æ–≤: {admin_active_status}")
    
    save_state()

def update_admin_panel(update: Update, context: CallbackContext):
    """Update admin panel with current status"""
    user_id = update.effective_user.id
    is_active = admin_active_status.get(user_id, True)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π" if is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
    
    keyboard = [
        [InlineKeyboardButton(status_text, callback_data="toggle_status")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="close_dialog")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="transfer_client")]
    ]
    
    if admin_levels.get(user_id) == 2:
        keyboard.extend([
            [InlineKeyboardButton("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="monitor")],
            [InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞", callback_data="generate_password")],
            [InlineKeyboardButton("‚≠ê –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞", callback_data="promote_info")]
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=update.callback_query.message.message_id,
            text=f"‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í–∞—à —Å—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=reply_markup
        )
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í–∞—à —Å—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=reply_markup
        )

def feedback_command(update: Update, context: CallbackContext):
    """Handle user feedback"""
    user = update.effective_user
    user_display_name = get_user_display_name(user)
    
    if not context.args:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /feedback <–≤–∞—à –æ—Ç–∑—ã–≤>"
        )
        return
    
    feedback = ' '.join(context.args)
    
    # Save feedback to database
    conn = sqlite3.connect('support_bot.db')
    c = conn.cursor()
    try:
        c.execute(
            'INSERT INTO feedback (user_id, feedback, timestamp) VALUES (?, ?, datetime("now"))',
            (user.id, feedback)
        )
        conn.commit()
    finally:
        c.close()
        conn.close()
    
    # Notify admins
    admin_msg = f"""
üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üë§ {user_display_name}
üí¨ {feedback}
"""
    context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_msg)
    
    # Thank the user
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
    )

def cleanup_tasks():
    """Periodic cleanup of caches and temporary data"""
    while True:
        try:
            # Clear message queue if too large
            if len(message_queue) > 900:
                message_queue.clear()
            
            # Clear expired passwords
            current_time = datetime.now()
            expired_passwords = [
                pwd for pwd, time in one_time_passwords.items()
                if (current_time - time).total_seconds() > 86400
            ]
            for pwd in expired_passwords:
                del one_time_passwords[pwd]
            
            # Clear caches
            user_cache.clear()
            admin_cache.clear()
            
            # Clear function cache
            get_user_display_name.cache_clear()
            
            # Force garbage collection
            import gc
            gc.collect()
            
            time.sleep(3600)  # Run every hour
            
        except Exception as e:
            logger.error(f"Error in cleanup_tasks: {e}")
            time.sleep(3600)

def optimize_database():
    """Optimize database periodically"""
    while True:
        try:
            # First connection for deletion
            conn = sqlite3.connect('support_bot.db')
            c = conn.cursor()
            try:
                # Remove old messages
                c.execute(
                    'DELETE FROM dialog_history WHERE timestamp < datetime("now", "-30 days")'
                )
                conn.commit()
            finally:
                c.close()
                conn.close()

            # Second connection for VACUUM
            conn = sqlite3.connect('support_bot.db')
            try:
                conn.execute('VACUUM')
                conn.commit()
            finally:
                conn.close()
                
            time.sleep(86400)  # Run daily
            
        except Exception as e:
            logger.error(f"Error in optimize_database: {e}")
            time.sleep(3600)

def cleanup_old_dialogs():
    """Cleanup old dialogs periodically"""
    while True:
        try:
            conn = sqlite3.connect('support_bot.db')
            c = conn.cursor()
            try:
                # Remove dialogs older than DIALOG_TIMEOUT
                c.execute(
                    'DELETE FROM dialog_history WHERE timestamp < datetime("now", ?)',
                    (f'-{DIALOG_TIMEOUT} seconds',)
                )
                conn.commit()
            finally:
                c.close()
                conn.close()
            
            time.sleep(3600)  # Run cleanup every hour
            
        except Exception as e:
            logger.error(f"Error in cleanup_old_dialogs: {e}")
            time.sleep(3600)

def main():
    """Main function to run the bot"""
    try:
        # Check for running instances
        current_process = psutil.Process()
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            if proc.info['name'] == 'python.exe' and proc.pid != current_process.pid:
                try:
                    cmdline = proc.info['cmdline']
                    if cmdline and 'support_bot.py' in cmdline[-1]:
                        logger.error("Another instance of the bot is already running!")
                        return
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

        if not BOT_TOKEN:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return

        # Initialize database
        init_database()
        
        # Create updater and application
        updater = Updater(BOT_TOKEN, use_context=True, workers=8)
        dispatcher = updater.dispatcher

        # Register handlers with run_async parameter
        dispatcher.add_handler(CommandHandler("start", start_command, run_async=True))
        dispatcher.add_handler(CommandHandler("help", help_command, run_async=True))
        dispatcher.add_handler(CommandHandler("admin", admin_command, run_async=True))
        dispatcher.add_handler(CommandHandler("set_tag", set_tag_command, run_async=True))
        dispatcher.add_handler(CommandHandler("promote", promote_admin_command, run_async=True))
        dispatcher.add_handler(CommandHandler("admins", list_admins_command, run_async=True))
        dispatcher.add_handler(CommandHandler("monitor", monitor_command, run_async=True))
        dispatcher.add_handler(CommandHandler("stats", stats_command, run_async=True))
        dispatcher.add_handler(CommandHandler("feedback", feedback_command, run_async=True))
        dispatcher.add_handler(CommandHandler("broadcast", broadcast_command, run_async=True))
        
        # Message handler with custom filters
        message_handler = CustomMessageHandler()
        dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command & Filters.chat_type.private,
            handle_message,
            run_async=True
        ))
        
        # Callback query handler
        dispatcher.add_handler(CallbackQueryHandler(button_callback, run_async=True))

        # Add error handler
        def error_handler(update, context):
            """Log Errors caused by Updates."""
            logger.error(f'Update "{update}" caused error "{context.error}"')
            
        dispatcher.add_error_handler(error_handler)

        # Start background tasks in threads
        import threading
        threading.Thread(target=cleanup_tasks, daemon=True).start()
        threading.Thread(target=cleanup_old_dialogs, daemon=True).start()
        threading.Thread(target=optimize_database, daemon=True).start()

        # Start the bot
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        save_state()
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise 